Write a function that takes in two strings: a main string and a potential substring of the main string. 
The function should return a version of the main string with
every instance of the substring in it wrapped between underscores. If two instances of the substring in
the main string overlap each other or sit side by side, the
underscores relevant to these two substrings should only appear on the far left of the left substring 
and on the far right of the right substring. If the main string
does not contain the other string at all, return the main string intact.

Sample input:"testthis is a testtest to see if testestest it works","test"
Sample output:"_test_this is a _testtest_to see if_testestest_it works"

function underscorifySubstring(string, substring) {
    
    let allSubstringIdx = getAllSubstringIdx(string,substring) // helper
    if(allSubstringIdx.length === 0) return string
    let combinedStringIdx = getCombinedStringIdx(allSubstringIdx) // helper
    let strArr = string.split("")
    for(let arr of combinedStringIdx){
      let start = arr[0]
      let end = arr[1]
      strArr[start] = "_" + strArr[start]
      strArr[end] = strArr[end] + "_"
    }
    return strArr.join("")
}

function getAllSubstringIdx(string,substring){
  let result = []
  
  for(let pos = string.indexOf(substring,0); pos !== -1; pos = string.indexOf(substring,pos + 1)){
    result.push([pos, pos + (substring.length - 1)])
  }
  
  return result
}


function getCombinedStringIdx(nestedArr){
  
  for(let i = 1; i < nestedArr.length; i++){
    let currArr = nestedArr[i]
    let prevArr = nestedArr[i - 1]
    if(prevArr[1] >= currArr[0]){
      let newArr = []
      newArr[0] = Math.min(prevArr[0], currArr[0])
      newArr[1] = Math.max(prevArr[1], currArr[1])
      nestedArr[i] = newArr
      nestedArr.splice(i - 1, 1)
      i--
    }
  }
  return nestedArr
}



